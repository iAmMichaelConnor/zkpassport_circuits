use dep::std::println;
use dep::biguint::BigUint56;
use dep::rsa::{verify_rsa_sha256_pkcs1v15};
use dep::std::hash::sha256;
use dep::sha2::sha256 as sha256_with_zero_padding;
use dep::date::Date;

/**
* WARNING: the RSA signature verification algorithm used here is making an assumption 
* that is likely not fully secure.
* For now, we continue to use it for performance reason, but we will switch to a fully 
* secure implementation fairly soon.
*/

/**
* The standards for passports and any other travel documents, electronic or not,
* are defined in the ICAO (International Civil Aviation Organization) 9303 document available here: 
* https://www.icao.int/publications/pages/publication.aspx?docnum=9303
*/

/**
* The structure of the MRZ is well defined and standardized by the ICAO
* so the index will always be the same for every passport
* c.f. ICAO 9303-4, Appendix B
*/
// Index for the three letter code of the country of citizenship
// Note that the first three letter code (index 2) in the MRZ is the country of issuance
// not citizenship
global MRZ_COUNTRY_INDEX = 54;
// Index for the date of birth (YYMMDD)
global MRZ_BIRTHDATE_INDEX = 57;
// Index for the sex of the passport holder (M, F or < if unspecified)
global MRZ_SEX_INDEX = 64;
// Index for the date of expiry (YYMMDD)
global MRZ_EXPIRY_DATE_INDEX = 65;

mod utils;

struct PassportData {
    // Last 32 bytes: result of the hash of all the hashes of the data groups
    // Rest of the bytes: padding data + signature date
    e_content: [u8; 104],
    // The signature of the passport data, essentially the signature by the private
    // key of the Document Signing Certificate (DSC) of the passport over e_content
    encrypted_digest: [u8; 256],
    // The Machine Readable Zone (MRZ) of the passport
    // The two lines at the bottom of the passport data page
    mrz: str<88>,

    // The hashes of each data group
    // While the hashing algorithm could be any SHA, we assume it's SHA-256
    // for now as is the case for French passports
    // Only DG1 and DG2 are mandatory
    // The others are optional (or conditional under certain circumstances)
    // If not present in the passport, the array shall be filled with 0s

    // Data Group 1 -> Contains the MRZ (Machine Readable Zone)
    dg1_hash: [u8; 32],
    // Data Group 2 -> Contains the photo of the passport holder
    dg2_hash: [u8; 32],
    // Data Group 3 -> Contains the fingerprints of the passport holder (access likely restricted)
    dg3_hash: [u8; 32],
    // Data Group 4 -> Contains the iris scan of the passport holder (access likely restricted)
    dg4_hash: [u8; 32],
    // Data Group 5 -> Contains the displayed portrait
    dg5_hash: [u8; 32],
    // Data Group 6 -> Reserved for future use (so not used as of today)
    dg6_hash: [u8; 32],
    // Data Group 7 -> Contains the displayed signature
    dg7_hash: [u8; 32],
    // Data Group 8 -> Yet to be defined, can be used for temporary proprietary usage
    dg8_hash: [u8; 32],
    // Data Group 9 -> Yet to be defined, can be used for temporary proprietary usage
    dg9_hash: [u8; 32],
    // Data Group 10 -> Yet to be defined, can be used for temporary proprietary usage
    dg10_hash: [u8; 32],
    // Data Group 11 -> Contains additional personal details (such as the address, full date of birth, etc.)
    dg11_hash: [u8; 32],
    // Data Group 12 -> Contains additional document details (such as date of issue, issuing authority, etc.)
    dg12_hash: [u8; 32],
    // Data Group 13 -> Freeform data group where each State can fully decide of the data in it and how to encode them
    dg13_hash: [u8; 32],
    // Data Group 14 -> Contains security options for authentication with the chip of the passport
    dg14_hash: [u8; 32],
    // Data Group 15 -> Contains the Active Authentication Public Key Info
    dg15_hash: [u8; 32],
    // Data Group 16 -> Contains the details of the persons to notify (i.e. emergency contacts)
    dg16_hash: [u8; 32],
    // Data used to verify the signature
    // Generated by the pre-compute function in Rust
    // c.f. main.rs
    final_e: [u8; 256],
    quotient: [u8; 256],
}

struct DSCData {
    // The public key of the Document Signing Certificate (DSC)
    // Most likely a 2048-bit RSA key, so that's the size we set here
    // 256 bytes = 2048 bits
    pubkey: [u8; 256],
    // The signature of the DSC TBS certificate by the CSCA certificate
    // 512 bytes = 4096 bits
    signature: [u8; 512],
    // The TBS certificate of the DSC
    // TBS stands for To Be Signed
    tbs_certificate: [u8; 888],
    // Data used to verify the signature
    // Generated by the pre-compute function in Rust
    // c.f. main.rs
    final_e: [u8; 512],
    quotient: [u8; 512],
}

struct CSCACertData {
    // The public key of the Country Signing Certificate Authority (CSCA)
    // Most likely a 4096-bit RSA key, so that's the size we set here
    // 512 bytes = 4096 bits
    pubkey: [u8; 512],
}

/**
* To form the whole Data Group 1, the MRZ is padded with some tags and lengths 
* as specified in the ICAO specifications
* c.f. see ICAO 9303-11, 4.7.1, Table 39
*/
fn get_dg1_from_mrz(mrz: str<88>) -> [u8; 93] {
    let mut dg1 = [0 as u8; 93];

    // Tag for Data Group 1 (which contains the MRZ)
    dg1[0] = 97;
    // Length of the array 88 + 2 bytes for the following tag + 1 byte for the length of the MRZ
    dg1[1] = 91;
    // 5F1F is the tag for the MRZ data within Data Group 1
    // First byte is 5F = 95 in decimals
    dg1[2] = 95;
    // Second byte is 1F = 31 in decimals
    dg1[3] = 31;
    // Length of the MRZ
    dg1[4] = 88;

    let mrz_bytes = mrz.as_bytes();

    // The MRZ itself
    for i in 5..93 {
        dg1[i] = mrz_bytes[i - 5];
    }

    dg1
}

fn verify_passport_signature(passport_data: PassportData, dsc_data: DSCData) -> bool {
    // We assume the bytes are in big endian format so we convert them to little endian
    let sig_biguint = BigUint56::from_bytes(utils::reverse_bytes_array(passport_data.encrypted_digest));
    let pubkey_biguint = BigUint56::from_bytes(utils::reverse_bytes_array(dsc_data.pubkey));
    let final_e_biguint = BigUint56::from_bytes(utils::reverse_bytes_array(passport_data.final_e));
    let quotient_biguint = BigUint56::from_bytes(utils::reverse_bytes_array(passport_data.quotient));

    let msg_hash = sha256(passport_data.e_content);

    verify_rsa_sha256_pkcs1v15(
        msg_hash,
        sig_biguint,
        pubkey_biguint,
        final_e_biguint,
        quotient_biguint
    )
}

fn verify_dsc_signature(dsc_data: DSCData, csca_cert_data: CSCACertData) -> bool {
    // We assume the bytes are in big endian format so we convert them to little endian
    let sig_biguint = BigUint56::from_bytes(utils::reverse_bytes_array(dsc_data.signature));
    let pubkey_biguint = BigUint56::from_bytes(utils::reverse_bytes_array(csca_cert_data.pubkey));
    let final_e_biguint = BigUint56::from_bytes(utils::reverse_bytes_array(dsc_data.final_e));
    let quotient_biguint = BigUint56::from_bytes(utils::reverse_bytes_array(dsc_data.quotient));

    let msg_hash = sha256(dsc_data.tbs_certificate);

    verify_rsa_sha256_pkcs1v15(
        msg_hash,
        sig_biguint,
        pubkey_biguint,
        final_e_biguint,
        quotient_biguint
    )
}

fn check_expiry(passport_data: PassportData, current_date_bytes: [u8; 8]) {
    let bytes_mrz = passport_data.mrz.as_bytes();

    let threshold_year = Date::new(2070, 1, 1);
    let threshold_year_bytes = threshold_year.to_bytes();

    let current_date = Date::from_bytes_long_year(current_date_bytes);

    let expiry_date_bytes = utils::get_array_slice(bytes_mrz, MRZ_EXPIRY_DATE_INDEX, MRZ_EXPIRY_DATE_INDEX + 6);
    let expiry_date = Date::from_bytes_short_year(
        expiry_date_bytes,
        [threshold_year_bytes[2], threshold_year_bytes[3]]
    );

    assert(current_date.lt(expiry_date));
}

fn proof_of_age(
    passport_data: PassportData,
    age_required: u8,
    is_limit_minimum: bool,
    current_date_bytes: [u8; 8]
) {
    let bytes_mrz = passport_data.mrz.as_bytes();

    let birthdate_bytes = utils::get_array_slice(bytes_mrz, MRZ_BIRTHDATE_INDEX, MRZ_BIRTHDATE_INDEX + 6);
    let birthdate = Date::from_bytes_short_year(
        birthdate_bytes,
        [current_date_bytes[2], current_date_bytes[3]]
    );

    let current_date = Date::from_bytes_long_year(current_date_bytes);

    if is_limit_minimum {
        assert(current_date.gte(birthdate.add_years(age_required as u16)));
    } else {
        assert(current_date.lte(birthdate.add_years(age_required as u16)));
    }
}

fn proof_of_citizenship(passport_data: PassportData, country: [u8; 3]) {
    let bytes_mrz = passport_data.mrz.as_bytes();

    let country_bytes: [u8; 3] = utils::get_array_slice(bytes_mrz, MRZ_COUNTRY_INDEX, MRZ_COUNTRY_INDEX + 3);

    assert(country_bytes[0] == country[0]);
    assert(country_bytes[1] == country[1]);
    assert(country_bytes[2] == country[2]);
}

/**
* Computes the hash of the MRZ (Data Group 1) and checks it is the same as the one
* provided in the SOD file of the passport and then use it along with the rest of the
* hashes of the remaining data groups to compute the final hash contained in the last 32 bytes of
* eContent that is then signed by the Document Signing Certificate (DSC)
* This lets us make sure the data is authentic and has not been tampered with, so we can use the data 
* of the MRZ to build subsequent proofs (age, citizenship, etc.)
*/
fn check_integrity_of_data(passport_data: PassportData) {
    let computed_dg1 = get_dg1_from_mrz(passport_data.mrz);

    // We only need to recompute the hash of the MRZ (or more accurately that of Data Group 1)
    // within the circuit as this is the only data group we use to build the proof (age, country, etc.)
    let computed_dg1_hash = sha256(computed_dg1);

    // Check the computed hash of Data Group 1 (i.e. MRZ) is the same 
    // as the one from the SOD file of the passport
    // c.f. ICAO 9303-11, 4.6.2 for more information
    assert(computed_dg1_hash == passport_data.dg1_hash);

    // We group all the hashes of the data groups into an array
    // so we can iterate over it for the final hash computation
    let data_groups = [
        computed_dg1_hash,
        passport_data.dg2_hash,
        passport_data.dg3_hash,
        passport_data.dg4_hash,
        passport_data.dg5_hash,
        passport_data.dg6_hash,
        passport_data.dg7_hash,
        passport_data.dg8_hash,
        passport_data.dg9_hash,
        passport_data.dg10_hash,
        passport_data.dg11_hash,
        passport_data.dg12_hash,
        passport_data.dg13_hash,
        passport_data.dg14_hash,
        passport_data.dg15_hash,
        passport_data.dg16_hash
    ];

    // The max size of the array is 648 bytes with all 16 data groups present
    // i.e. 16 * (7 bytes of padding data + 32 bytes of hash data) + 24 bytes of padding data = 648 bytes
    // Just to be safe, we set it to 700 bytes as the actual size doesn't matter
    // as long as it's big enough for the maximum size
    let mut content_to_hash = [0 as u8; 700];
    let mut current_index = 0;

    // The first 24 bytes are padding data
    content_to_hash = utils::insert_into_array(content_to_hash, [48, 130, 1, 37, 2, 1, 0, 48, 11, 6, 9, 96, 134, 72, 1, 101, 3, 4, 2, 1, 48, 130, 1, 17], current_index);
    current_index += 24;

    for i in 0..16 {
        if data_groups[i] != [0 as u8; 32] {
            // 7 bytes of padding data + 32 bytes of hash data
            content_to_hash = utils::insert_7_bytes_into_array(content_to_hash, [48, 37, 2, 1, i + 1, 4, 32], current_index);
            content_to_hash = utils::insert_32_bytes_into_array(content_to_hash, data_groups[i], current_index + 7);
            current_index += 39;
        }
    }

    let computed_final_hash = sha256_with_zero_padding(content_to_hash, current_index as u16);

    let e_content_length = passport_data.e_content.len();
    for i in 0..32 {
        // The last 32 bytes of the e_content are the hash of the data groups
        // The rest is padding and the signature date, not important to check
        assert(computed_final_hash[i] == passport_data.e_content[e_content_length - 32 + i]);
    }
}

fn main(
    passport_data: PassportData,
    dsc_data: DSCData,
    // The CSCA certificates are public knowledge and 
    // we want to let verifiers use the CSCA certificate
    // that they got from a source they trust to verify the proof
    csca_cert_data: pub CSCACertData,
    // The current date is public so verifiers can check the date
    // provided to the proof is correct
    current_date: pub str<8>,
    // The minimum age required is public so verifiers can check
    // the age provided to the proof is correct
    min_age_required: pub u8,
    // The country is public so verifiers can check 
    // the country provided to the proof is correct
    country: pub str<3>
) {
    // Check the passport is not expired first
    check_expiry(passport_data, current_date.as_bytes());
    // Check the integrity of the data used for the proof
    check_integrity_of_data(passport_data);
    // First verify the signature of the passport data
    verify_passport_signature(passport_data, dsc_data);
    // Then verify the signature of the DSC to make sure
    // it was signed by the CSCA certificate of the issuing State
    verify_dsc_signature(dsc_data, csca_cert_data);
    // Verify the age of the passport holder
    proof_of_age(passport_data, min_age_required, true, current_date.as_bytes());
    // Verify the country of the passport holder
    proof_of_citizenship(passport_data, country.as_bytes());
}
